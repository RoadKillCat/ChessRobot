//general
$fn = 30;                        //convexity of general curved faces
thickness = 5;                   //thickness of the flat parts
length = 54;

//bottom plate (feet)
plateHoleDiameter = 4;            //diameter of holes in metal bottom plate
plateHoleWidth = 19;             //shortest distance between the pairs of holes in plate
plateHoleLength = 44;            //long distance between the pairs of holes in botto
plateFeetWidth = 20;             //width of the pads that connect the short distanced screws
plateFeetLength = length;            //length of the feet
//servo pad
servoHoleDiameter = 3;           //diamter of holes for servo attachment
servoHoleWidth = 10;             //width of short distance between hole so same side of servo
servoHoleLength = 48;            //length of long distance between holes on either side of servo
servoPadWidth = 18;              //width of servo pad
servoPadLength = length;         //length of servo pad
servoPadHeight = 25;             //height of servo pad
servoLength = 41;

module foot(){
   translate([0, plateFeetWidth/-2, 0])
   difference(){
      cube([plateFeetLength, plateFeetWidth, thickness]);
      translate([plateFeetLength/2 - plateHoleWidth/2, plateFeetWidth/2, 0])
      cylinder(h=thickness, d=plateHoleDiameter);
      translate([plateFeetLength/2 + plateHoleWidth/2, plateFeetWidth/2, 0])
      cylinder(h=thickness, d=plateHoleDiameter);
   }
}


module servoPad(){
   difference(){
      cube([servoPadLength, servoPadWidth, thickness]);
      translate([servoPadLength/2 - servoHoleLength/2, servoPadWidth/2 - servoHoleWidth/2, 0])
      cylinder(d = servoHoleDiameter, h = thickness);
      translate([servoPadLength/2 - servoHoleLength/2, servoPadWidth/2 + servoHoleWidth/2, 0])
      cylinder(d = servoHoleDiameter, h = thickness);
      translate([servoPadLength/2 + servoHoleLength/2, servoPadWidth/2 - servoHoleWidth/2, 0])
      cylinder(d = servoHoleDiameter, h = thickness);
      translate([servoPadLength/2 + servoHoleLength/2, servoPadWidth/2 + servoHoleWidth/2, 0])
      cylinder(d = servoHoleDiameter, h = thickness);
   }   
}

module wall(){
   hull(){
      translate([0,plateFeetWidth/-2, 0])
      cube([plateFeetLength, plateFeetWidth, thickness]);
      translate([0,plateHoleLength/2 - servoPadWidth/2, servoPadHeight])
      cube([servoPadLength, servoPadWidth, thickness]);
   }  
}

module base(){
    difference(){
       union(){
          difference(){
             union(){
                wall();
                translate([0, plateHoleLength, 0])
                mirror([0,1,0])
                wall();
             }
             translate([0, plateHoleLength/2 - servoPadWidth/2, servoPadHeight])
             cube([servoPadLength, servoPadWidth, thickness]);
          }
          translate([0, plateHoleLength/2 - servoPadWidth/2, servoPadHeight])
          servoPad();
       }
       translate([(length - servoLength) / 2 ,-0.5 * plateHoleLength, 0])
       cube([servoLength, plateHoleLength*2, servoPadHeight * 2]);   
    }

    foot();
    translate([0, plateHoleLength, 0])
    foot();
}

base();$fn = 50;
locked3mm = 2.9;           //hole diameter for a locked/tight/screwed down 2mm screw
freeTurning2mm = 2.5;      //hole diameter for a free turning 2mm screw
locked2mm  = 1.9;            //hole diameter for a locked/tight/screwed down 2mm
thickness = 2.7;           //thickness of the gears and beams etc.
gearRadius = 15;           //radius of the gears (cogs)
leftGearHoleDiameter = freeTurning2mm; //diameter of hole in left gear
rightGearHoleDiameter = 2.1;   //attacing to servo sotiny bit > 2mm (shrinkage)
noTeeth  = 7;              //number of teeth on the gears
teethWidth = 4;            //width of gear teeth
teethBevel = 3;            //diameter of circles at end of teeth
teethHeight = 3.5;         //height of gear teeth
teethBudge = 0.4;         //distances gears need to be appart to fit together
beamWidths = 4;           //width of all beams
beam1Width = beamWidths;    //width of the first beam
beam1Length = 33;          //length of the first beam
beam1HoleDiameter = freeTurning2mm; //diameter of screw hole at end of beam
beam2Width = beamWidths;   //width of the second beam
beam2Length = beam1Length; //length of the second beam
beam2HoleDiameter = freeTurning2mm;//diameter of screw holes at end of beam
beam2CenterDist = 10;       //translating beam2 from beam1 towards the centerline
beam2ForwardDist = 18;     //translatimg beam2 from beam1 in y dir towards the grabber end
servoWidth = 12;           //width of servo
servoLength = 23;          //length of servo
servoHeight = 10.8;        //height of servo bracket (not whole servo)
servoWallThick = 1.2;      //thickness of bracket
servoShaft = 5.9;          //distance of shaft from closest lengthwise edge
gripperArmLength = 24;     //length of nipper
gripperArmThickness = 5;   //thickness of end nippers
gripperArmPadLength = 16;  //length of the raised pad
gripperArmPadThickness = 3;//thickness of the raised pad
gripperArmPadHeight = 12;  //height of the raised pad
gripperArmWidth = beamWidths; //width of end nippers

gearHoleDist = gearRadius * 2 - teethHeight + teethBudge;

//////

armBlockWidth = 15;        //width of block for connecting arms
armBlockLength = 5;         //length ""
armBlockHeight = 9.9 + 5.5;         //height for screws to attach to connecting arms

supportArmLength = 5;      //length of block
supportArmWidth = 15;       //widhth of block
supportArmHeight = armBlockHeight + 20;     //heighrt for screw to attach to the support arm
supportArmDistance = 32;   //distance from little block
supportArmStengthWidth  = 4;  //width of support for support arm block
supportArmStengthLength = 2.5; //length ""


plateWidth = 40.5;           //width of bottom plate
plateLength = 40 + locked3mm + armBlockLength/2;          //length of bottom palte
plateBevelBack = 5;        //bevel radius for back corners of plate
plateBevelFront = 10;      //bevel radius for front corners of plate


module gear(){
   cylinder(r=gearRadius - teethHeight, h = thickness);
   for (i = [0:180/(noTeeth-1):180]){
      rotate(i)
      hull(){
         translate([0,-0.5*teethWidth,0])
         cube([gearRadius - teethHeight, teethWidth, thickness]);
         translate([gearRadius - teethBevel /2, 0, 0])
         cylinder(d = teethBevel, h=thickness, $fn = 25);
      }
   }
}


module leftGear(){
   difference(){
      union(){
         rotate(-(180/(noTeeth-1)) / 2 - 90)
         gear();
         beam1();
      }
      cylinder(d=leftGearHoleDiameter, h=thickness);
   }
}

module rightGear(){
   difference(){
      union(){
         rotate(90)
         gear();
         beam1();
      }
      cylinder(d=rightGearHoleDiameter, h=thickness);
   }  
}

module beam1(){
   difference(){
      union(){
         translate([-0.5 * beam1Width, 0, 0])
         cube([beam1Width, beam1Length - 0.5 * beam1Width, thickness]);
         translate([0, beam1Length - 0.5 * beam1Width, 0])
         cylinder(d=beam1Width, h=thickness);
      }
      translate([0, beam1Length - 0.5 * beam1Width, 0])
      cylinder(d=beam1HoleDiameter, h=thickness);
   }
}

module beam2(){
   difference(){
      union(){
         translate([-0.5 * beam2Width, 0, 0])
         cube([beam2Width, beam2Length - 0.5 * beam2Width, thickness]);
         cylinder(d=beam2Width, h=thickness);
         translate([0,beam2Length - 0.5 * beam2Width, 0])
         cylinder(d=beam2Width, h=thickness);   
      }
      cylinder(d=beam2HoleDiameter, h=thickness);
      translate([0, beam2Length - 0.5 *beam2Width, 0])
      cylinder(d=beam2HoleDiameter, h=thickness);      
   }
}

module bottomPlate(){
   difference (){
      //bottom base plate to cut crap out of
      hull(){
         translate([gearHoleDist/2 - plateWidth/2 + plateBevelFront, plateLength/2 - plateBevelFront, 0])
         cylinder(r=plateBevelFront, h = thickness);
         translate([gearHoleDist/2 + plateWidth/2 - plateBevelFront, plateLength/2 - plateBevelFront, 0])
         cylinder(r=plateBevelFront, h = thickness);
         translate([gearHoleDist/2 - plateWidth/2 + plateBevelBack , -plateLength/2 + plateBevelBack, 0])
         cylinder(r=plateBevelBack, h = thickness);
         translate([gearHoleDist/2 + plateWidth/2 - plateBevelBack , -plateLength/2 + plateBevelBack, 0])
         cylinder(r=plateBevelBack, h = thickness);
      }
      
      /*
      translate([-0.5 * plateLength + 0.5 * gearHoleDist, -0.5 * plateWidth, 0])
      cube([plateLength, plateWidth, thickness]);
      */
      
      //holes for screws of gears and servo mount cutouts
      cylinder(d=locked2mm,h=thickness);
      translate([gearHoleDist -2, 0, 0])
      cube([15, servoWidth, 30], center=true);  
      
      //cutouts for beam 2 bottom hole mounts
      translate([beam2CenterDist, beam2ForwardDist, 0])
      cylinder(d=locked2mm, h=thickness);
      translate([gearHoleDist - beam2CenterDist, beam2ForwardDist, 0])
      cylinder(d=locked2mm, h=thickness);
      
   }
   translate([gearHoleDist, 0, -servoHeight + thickness])
   servoBracket();
   
   //arm block
   translate([gearHoleDist / 2 - armBlockWidth/2, -plateLength/2, -armBlockHeight])
   difference(){
      cube([armBlockWidth, armBlockLength, armBlockHeight + armBlockLength/2]);
      translate([0, armBlockLength/2, armBlockLength/2 ])
      rotate([0, 90, 0])
      cylinder(d = locked3mm, h=armBlockWidth);
   }
   
   //suport arm block
   translate([gearHoleDist / 2 - supportArmWidth/2, -plateLength/2 + armBlockLength/2 + supportArmDistance - supportArmLength/2, -supportArmHeight])
   difference(){
      union(){
         cube([supportArmWidth, supportArmLength, supportArmHeight + supportArmLength/2]);
         translate([supportArmWidth/2-supportArmStengthWidth/2,-supportArmStengthLength,supportArmLength/2+ supportArmHeight - servoHeight])
         cube([supportArmStengthWidth, supportArmStengthLength, servoHeight]);
      }
      translate([0,supportArmLength/2, supportArmLength/2])
      rotate([0, 90, 0])
      cylinder(d=locked3mm, h = supportArmWidth);
   }
         
}

module servoBracket(){
 translate([-(servoLength+2*servoWallThick)/2 - servoShaft,-(servoWidth+2*servoWallThick)/2,0])
 difference(){
   cube([servoLength + 2*servoWallThick, servoWidth + 2*servoWallThick, servoHeight]);
   translate([servoWallThick, servoWallThick, 0])
   cube([servoLength, servoWidth, servoHeight]);
 }   
}

module gripperArm(){
   difference(){
      union(){
         hull(){
            cylinder(d = gripperArmWidth, h = thickness);   
            translate([beam2CenterDist, beam2ForwardDist, 0])
            cylinder(d = gripperArmWidth, h = thickness);
         }
         translate([-0.5 * gripperArmWidth + beam2CenterDist, beam2ForwardDist, 0])
         cube([gripperArmWidth, gripperArmLength, thickness]);

         translate([-0.5 * gripperArmWidth + beam2CenterDist + (gripperArmWidth - gripperArmPadThickness), beam2ForwardDist + (gripperArmLength - gripperArmPadLength), 0])
         cube([gripperArmPadThickness, gripperArmPadLength, gripperArmPadHeight]);
         
      }
      cylinder(d = locked2mm, h = thickness);   
      translate([beam2CenterDist, beam2ForwardDist, 0])
      cylinder(d = locked2mm, h = thickness);
      
   }
}

module leftArm(){
   gripperArm();
}

module rightArm(){
   mirror([1,0,0])
   gripperArm();
}


translate([0,beam1Length - 0.5 * beamWidths,-thickness])
leftArm();

translate([gearHoleDist,beam1Length - 0.5 * beamWidths,-thickness])
!rightArm();

translate([beam2CenterDist,beam2ForwardDist,0])
beam2();

translate([gearHoleDist - beam2CenterDist,beam2ForwardDist,0])
beam2();


translate([0,0,-thickness])
bottomPlate();

leftGear();

translate([gearRadius * 2 - teethHeight + teethBudge,0,0])
rightGear();//general
$fn = 30;                  //convexity of general curved faces
thickness = 3.9;             //thickness of arm

//circular servo horn measurements
hornDiameter = 21;             //diameter of the circular horn
hornCenterHole = 9;          //diameter of the center hole (for screw)
hornOuterHoleDiameters = 1.9;  //diameter of the outer holes for screwing down horn
hornOuterHolesCenterDist = 7.8;//distance from center to the outer holes

//arm specific stuff
armLength = 200;//155;               //horn center to horn center distance for arm length

freeTurning3mm = 3.4;          //diameter of hole for free turning motion

module horn(){
   cylinder(d=hornCenterHole, h=thickness);
   translate([hornOuterHolesCenterDist, 0, 0])
   cylinder(d=hornOuterHoleDiameters, h=thickness);
   translate([-hornOuterHolesCenterDist, 0, 0])
   cylinder(d=hornOuterHoleDiameters, h=thickness);
}

difference(){
   hull(){
      cylinder(d=hornDiameter,h=thickness, $fn = 60);
      translate([0,armLength,0])
      cylinder(d=hornDiameter,h=thickness, $fn = 60);
   }
   horn();
   translate([0,armLength,0])
   cylinder(d=freeTurning3mm, h=thickness);
}//general
$fn = 30;                  //convexity of general curved faces
thickness = 3.9;             //thickness of arm

//circular servo horn measurements
hornDiameter = 21;             //diameter of the circular horn
hornCenterHole = 9;          //diameter of the center hole (for screw)
hornOuterHoleDiameters = 1.9;  //diameter of the outer holes for screwing down horn
hornOuterHolesCenterDist = 7.8;//distance from center to the outer holes

//arm specific stuff
armLength = 200;               //horn center to horn center distance for arm length

freeTurning3mm = 3.4;          //diameter of hole for free turning motion

module horn(){
   cylinder(d=hornCenterHole, h=thickness);
   translate([hornOuterHolesCenterDist, 0, 0])
   cylinder(d=hornOuterHoleDiameters, h=thickness);
   translate([-hornOuterHolesCenterDist, 0, 0])
   cylinder(d=hornOuterHoleDiameters, h=thickness);
}

difference(){
   hull(){
      cylinder(d=hornDiameter,h=thickness, $fn = 60);
      translate([0,armLength,0])
      cylinder(d=hornDiameter,h=thickness, $fn = 60);
   }
   cylinder(d=freeTurning3mm,h=thickness);
   translate([0,armLength,0])
   cylinder(d=freeTurning3mm,h=thickness);
}//general
$fn = 30;                  //convexity of general curved faces
thickness = 3.9;             //thickness of arm

//circular servo horn measurements
hornDiameter = 21;             //diameter of the circular horn
hornCenterHole = 8.9;          //diameter of the center hole (for screw)
hornOuterHoleDiameters = 1.9;  //diameter of the outer holes for screwing down horn
hornOuterHolesCenterDist = 7.8;//distance from center to the outer holes

//arm specific stuff
armLength = 39.4;               //horn center to horn center distance for arm length

pivotDiameter = 10;            //diameter of pivoting end
freeTurning3mm = 3.4;          //diameter of hole for free turning motion

module horn(){
   cylinder(d=hornCenterHole, h=thickness);
   translate([hornOuterHolesCenterDist, 0, 0])
   cylinder(d=hornOuterHoleDiameters, h=thickness);
   translate([-hornOuterHolesCenterDist, 0, 0])
   cylinder(d=hornOuterHoleDiameters, h=thickness);
}

difference(){
   hull(){
      cylinder(d=hornDiameter,h=thickness, $fn = 60);
      translate([0,armLength,0])
      cylinder(d=pivotDiameter,h=thickness, $fn = 60);
   }
   horn();
   translate([0,armLength,0])
   cylinder(d=freeTurning3mm,h=thickness);
}//general
$fn = 30;                  //convexity of general curved faces
thickness = 3.9;             //thickness of arm

//arm specific stuff
armLength =  200;//155;               //horn center to horn center distance for arm length

pivotDiameter = 10;            //diameter of pivoting end
freeTurning3mm = 3.4;          //diameter of hole for free turning motion

difference(){
   hull(){
      cylinder(d=pivotDiameter,h=thickness, $fn = 60);
      translate([0,armLength,0])
      cylinder(d=pivotDiameter,h=thickness, $fn = 60);
   }
   cylinder(d=freeTurning3mm,h=thickness);
   translate([0,armLength,0])
   cylinder(d=freeTurning3mm,h=thickness);
}//general
$fn = 30;                  //convexity of general curved faces
thickness = 3.9;             //thickness of arm

//circular servo horn measurements
hornDiameter = 21;             //diameter of the circular horn

//arm specific stuff
armLength =  200;//155               //horn center to horn center distance for arm length
leverLength = 39.4;             //length of lever bit on end of arm

pivotDiameter = 10;            //diameter of pivoting end
freeTurning3mm = 3.4;          //diameter of hole for free turning motion

difference(){
   hull(){
      cylinder(d=pivotDiameter,h=thickness, $fn = 60);
      translate([0,leverLength,0])
      cylinder(d=hornDiameter,h=thickness, $fn = 60);
      translate([0,leverLength+armLength,0])
      cylinder(d=pivotDiameter, h=thickness, $fn = 60);
   }
   cylinder(d=freeTurning3mm,h=thickness);
   translate([0,leverLength,0])
   cylinder(d=freeTurning3mm,h=thickness);
   translate([0,leverLength+armLength,0])
   cylinder(d=freeTurning3mm,h=thickness);
}//general
$fn = 30;                  //convexity of general curved faces
thickness = 3.9;             //thickness of arm

//circular servo horn measurements
hornDiameter = 21;             //diameter of the circular horn

//arm specific stuff
armLength =  155;               //horn center to horn center distance for arm length
leverLength = 39.4;             //length of lever bit on end of arm
supportHeight = 35;             //height between the supporting beam and the other beam going to the gripper

pivotDiameter = 10;            //diameter of pivoting end
freeTurning3mm = 3.4;          //diameter of hole for free turning motion

difference(){
   hull(){
      cylinder(d=hornDiameter,h=thickness, $fn = 60);
      translate([0,leverLength,0])
      cylinder(d=pivotDiameter,h=thickness, $fn = 60);
      translate([supportHeight, 0, 0])
      cylinder(d=pivotDiameter, h=thickness, $fn = 60);
   }
   cylinder(d=freeTurning3mm,h=thickness);
   translate([0,leverLength,0])
   cylinder(d=freeTurning3mm,h=thickness);
   translate([supportHeight, 0,0])
   cylinder(d=freeTurning3mm,h=thickness);
}//general
$fn = 30;                  //convexity of general curved faces
thickness = 3.9;             //thickness of arm

//circular servo horn measurements
hornDiameter = 21;             //diameter of the circular horn

//arm specific stuff
armLength =  200;//155               //horn center to horn center distance for arm length
leverLength = 39.4;             //length of lever bit on end of arm

pivotDiameter = 10;            //diameter of pivoting end
freeTurning3mm = 3.4;          //diameter of hole for free turning motion

difference(){
   hull(){
      cylinder(d=hornDiameter,h=thickness, $fn = 60);
      translate([0,armLength,0])
      cylinder(d=pivotDiameter, h=thickness, $fn = 60);
   }
   cylinder(d=freeTurning3mm,h=thickness);
   translate([0,armLength,0])
   cylinder(d=freeTurning3mm,h=thickness);
}/********************
model of mg996r servo
*********************/

//dimensions of central box (excluding the pads)
//height is including the proruding neck around the shaft
length = 40.3;
width = 20;
height = 37;

//distance from nearest wall to the motor shaft
wall_to_shaft = 10.5;

//self explanatory measuremets
hole_length = 48;
hole_width = 10;
hole_diameter = 4;

//height is from ground to bottom of pad
pad_height = 26;
//self explanatory
pad_thick = 2.5;
pad_length = 6.5;

//convexity of holes
$fn = 20;

module pad(){
    difference(){
        cube([pad_length, width, pad_thick]);
        translate([pad_length/2, width/2-hole_width/2, 0])
        cylinder(d=3,h=pad_thick);
        translate([pad_length/2, width/2+hole_width/2, 0])
        cylinder(d=3,h=pad_thick);
    }
}

module servo(){
    translate([0,0,pad_height])
    pad();
    translate([pad_length+length,0,pad_height])
    pad();
    translate([pad_length, 0, 0])
    cube([length, width, height]);
    translate([pad_length + wall_to_shaft, width/2, height])
    cylinder(h=5,d=5);
}

color([0,1,0])
servo();//general
$fn = 30;                      //convexity of general curved faces
thickness = 3.5;                 //thickness next to flat servo

servoDistance = 50;             //distance between the inner of the two servo's pads

//circle servo horn measurements
hornCenterHole = 7;            //diameter of the center hole (for screw)
hornOuterHoleDiameters = 1.9;  //diameter of the outer holes for screwing down horn
hornOuterHolesCenterDist = 7.8;//distance from center to the outer holes
hornDist = 5;                  //distance of horn from wall against servo pad

//servo pad
servoHoleDiameter = 2.87;           //diamter of holes for servo attachment
servoHoleWidth = 10;             //width of short distance between hole so same side of servo
servoHoleLength = 48;            //length of long distance between holes on either side of servo
servoPadWidth = 20;              //width of servo pad
servoPadLength = 54;             //length of servo pad
servoLength = 41;                //wideness (length) of servo
servoPadThickness = 8;           //thickness of servo pad
servoWidth = servoPadLength;     //width or thin side of the servo

//arm cutout
cutoutWidth = 30;        //width of cutout
cutoutDepth = 1.5;         //depth of cutout

module horn(){
   cylinder(d=hornCenterHole, h=thickness);
   translate([hornOuterHolesCenterDist, 0, 0])
   cylinder(d=hornOuterHoleDiameters, h=thickness);
   translate([-hornOuterHolesCenterDist, 0, 0])
   cylinder(d=hornOuterHoleDiameters, h=thickness);
}

module servoHoles(){
   translate([servoPadLength/2 - servoHoleLength/2, servoPadWidth/2 - servoHoleWidth/2, 0])
   cylinder(d = servoHoleDiameter, h = servoPadThickness);
   translate([servoPadLength/2 - servoHoleLength/2, servoPadWidth/2 + servoHoleWidth/2, 0])
   cylinder(d = servoHoleDiameter, h = servoPadThickness);
   translate([servoPadLength/2 + servoHoleLength/2, servoPadWidth/2 - servoHoleWidth/2, 0])
   cylinder(d = servoHoleDiameter, h = servoPadThickness);
   translate([servoPadLength/2 + servoHoleLength/2, servoPadWidth/2 + servoHoleWidth/2, 0])
   cylinder(d = servoHoleDiameter, h = servoPadThickness);
}


module servoPad(){
   translate([servoPadLength/-2,0,thickness])
   rotate([90,0,0])
   difference(){
      cube([servoPadLength, servoPadWidth, servoPadThickness]);
      servoHoles();
   }
}

module hingeSection(){
   difference(){
      cube([(servoPadLength - servoLength) / 2, servoPadThickness, servoPadWidth/2 + (servoPadLength - servoLength) / 4]);
      translate([(servoPadLength - servoLength) / 4, 0, servoPadWidth / 2])
      rotate([-90,0,0])
      cylinder(d = servoHoleDiameter, h=servoPadThickness);
   }
}

module body(){
   translate([servoPadLength/-2, servoDistance/-2 - servoPadThickness, 0])
   cube([servoPadLength, servoDistance + 2 * servoPadThickness, thickness]);
   translate([0, servoDistance/-2, 0])
   servoPad();
   translate([0, servoDistance/2 + servoPadThickness, 0])
   servoPad();
}

difference(){
   body();
   //servos
   translate([servoLength/-2, servoDistance/-2 - servoPadThickness - 1, thickness])
   cube([servoLength, servoDistance + 2 * servoPadThickness + 2, servoPadWidth + 2]);
   //cutout
   translate([servoLength/-2, cutoutWidth / -2, thickness - cutoutDepth])
   cube([servoLength/2 - 1.5, cutoutWidth, cutoutDepth]);
   
   rotate(90)
   horn();
   
}
translate([servoPadLength/2 - (servoPadLength - servoLength) / 2 ,servoDistance/2,thickness+servoPadWidth])
hingeSection();

/*
difference(){
   hulledBody();
   
   union(){
      translate([-0.5*servoLength,-0.5*hornDiameter,thickness])
      cube([servoLength, hornDiameter, servoPadWidth+10]);
      
      translate([-0.5*servoWidth, -0.5*hornDiameter, thickness])
      cube([servoWidth, 0.5*hornDiameter-servoPadThickness, servoPadWidth+10]);
      
      translate([-0.5 * servoPadLength, -0.1, thickness])
      rotate([90,0,0])
      servoPad();
      
      horn();
   }
}   


//servoPad();
/*
module horn(){
   difference(){
      cylinder(d=hornDiameter, h=thickness, $fn = 60);
      cylinder(d=hornCenterHole, h=thickness);
      translate([hornOuterHolesCenterDist, 0, 0])
      cylinder(d=hornOuterHoleDiameters, h=thickness);
      translate([-hornOuterHolesCenterDist, 0, 0])
      cylinder(d=hornOuterHoleDiameters, h=thickness);
   }   
}

module servoPad(){
   difference(){
      cube([servoPadLength, servoPadWidth, servoPadThickness]);
      translate([servoPadLength/2 - servoHoleLength/2, servoPadWidth/2 - servoHoleWidth/2, 0])
      cylinder(d = servoHoleDiameter, h = servoPadThickness);
      translate([servoPadLength/2 - servoHoleLength/2, servoPadWidth/2 + servoHoleWidth/2, 0])
      cylinder(d = servoHoleDiameter, h = servoPadThickness);
      translate([servoPadLength/2 + servoHoleLength/2, servoPadWidth/2 - servoHoleWidth/2, 0])
      cylinder(d = servoHoleDiameter, h = servoPadThickness);
      translate([servoPadLength/2 + servoHoleLength/2, servoPadWidth/2 + servoHoleWidth/2, 0])
      cylinder(d = servoHoleDiameter, h = servoPadThickness);
   }  
}
