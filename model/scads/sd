//general
$fn = 30;                        //convexity of general curved faces
thickness = 5;                   //thickness of the flat parts
length = 54;

//bottom plate (feet)
plate_hole_diameter = 4;            //diameter of holes in metal bottom plate
plate_hole_width = 19;             //shortest distance between the pairs of holes in plate
plate_hole_length = 44;            //long distance between the pairs of holes in botto
plate_feet_width = 20;             //width of the pads that connect the short distanced screws
plate_feet_length = length;            //length of the feet
//servo pad
servo_hole_diameter = 3;           //diamter of holes for servo attachment
servo_hole_width = 10;             //width of short distance between hole so same side of servo
servo_hole_length = 48;            //length of long distance between holes on either side of servo
servo_pad_width = 18;              //width of servo pad
servo_pad_length = length;         //length of servo pad
servo_pad_height = 25;             //height of servo pad
servo_length = 41;

module foot(){
   translate([0, plate_feet_width/-2, 0])
   difference(){
      cube([plate_feet_length, plate_feet_width, thickness]);
      translate([plate_feet_length/2 - plate_hole_width/2, plate_feet_width/2, 0])
      cylinder(h=thickness, d=plate_hole_diameter);
      translate([plate_feet_length/2 + plate_hole_width/2, plate_feet_width/2, 0])
      cylinder(h=thickness, d=plate_hole_diameter);
   }
}


module servo_pad(){
   difference(){
      cube([servo_pad_length, servo_pad_width, thickness]);
      translate([servo_pad_length/2 - servo_hole_length/2, servo_pad_width/2 - servo_hole_width/2, 0])
      cylinder(d = servo_hole_diameter, h = thickness);
      translate([servo_pad_length/2 - servo_hole_length/2, servo_pad_width/2 + servo_hole_width/2, 0])
      cylinder(d = servo_hole_diameter, h = thickness);
      translate([servo_pad_length/2 + servo_hole_length/2, servo_pad_width/2 - servo_hole_width/2, 0])
      cylinder(d = servo_hole_diameter, h = thickness);
      translate([servo_pad_length/2 + servo_hole_length/2, servo_pad_width/2 + servo_hole_width/2, 0])
      cylinder(d = servo_hole_diameter, h = thickness);
   }   
}

module wall(){
   hull(){
      translate([0,plate_feet_width/-2, 0])
      cube([plate_feet_length, plate_feet_width, thickness]);
      translate([0,plate_hole_length/2 - servo_pad_width/2, servo_pad_height])
      cube([servo_pad_length, servo_pad_width, thickness]);
   }  
}

module base(){
    difference(){
       union(){
          difference(){
             union(){
                wall();
                translate([0, plate_hole_length, 0])
                mirror([0,1,0])
                wall();
             }
             translate([0, plate_hole_length/2 - servo_pad_width/2, servo_pad_height])
             cube([servo_pad_length, servo_pad_width, thickness]);
          }
          translate([0, plate_hole_length/2 - servo_pad_width/2, servo_pad_height])
          servo_pad();
       }
       translate([(length - servo_length) / 2 ,-0.5 * plate_hole_length, 0])
       cube([servo_length, plate_hole_length*2, servo_pad_height * 2]);   
    }

    foot();
    translate([0, plate_hole_length, 0])
    foot();
}

base();$fn = 50;
locked3mm = 2.9;           //hole diameter for a locked/tight/screwed down 2mm screw
free_turning2mm = 2.5;      //hole diameter for a free turning 2mm screw
locked2mm  = 1.9;            //hole diameter for a locked/tight/screwed down 2mm
thickness = 2.7;           //thickness of the gears and beams etc.
gear_radius = 15;           //radius of the gears (cogs)
left_gear_hole_diameter = free_turning2mm; //diameter of hole in left gear
right_gear_hole_diameter = 2.1;   //attacing to servo sotiny bit > 2mm (shrinkage)
no_teeth  = 7;              //number of teeth on the gears
teeth_width = 4;            //width of gear teeth
teeth_bevel = 3;            //diameter of circles at end of teeth
teeth_height = 3.5;         //height of gear teeth
teeth_budge = 0.4;         //distances gears need to be appart to fit together
beam_widths = 4;           //width of all beams
beam1_width = beam_widths;    //width of the first beam
beam1_length = 33;          //length of the first beam
beam1_hole_diameter = free_turning2mm; //diameter of screw hole at end of beam
beam2_width = beam_widths;   //width of the second beam
beam2_length = beam1_length; //length of the second beam
beam2_hole_diameter = free_turning2mm;//diameter of screw holes at end of beam
beam2_center_dist = 10;       //translating beam2 from beam1 towards the centerline
beam2_forward_dist = 18;     //translatimg beam2 from beam1 in y dir towards the grabber end
servo_width = 12;           //width of servo
servo_length = 23;          //length of servo
servo_height = 10.8;        //height of servo bracket (not whole servo)
servo_wall_thick = 1.2;      //thickness of bracket
servo_shaft = 5.9;          //distance of shaft from closest lengthwise edge
gripper_arm_length = 24;     //length of nipper
gripper_arm_thickness = 5;   //thickness of end nippers
gripper_arm_pad_length = 16;  //length of the raised pad
gripper_arm_pad_thickness = 3;//thickness of the raised pad
gripper_arm_pad_height = 12;  //height of the raised pad
gripper_arm_width = beam_widths; //width of end nippers

gear_hole_dist = gear_radius * 2 - teeth_height + teeth_budge;

//////

arm_block_width = 15;        //width of block for connecting arms
arm_block_length = 5;         //length ""
arm_block_height = 9.9 + 5.5;         //height for screws to attach to connecting arms

support_arm_length = 5;      //length of block
support_arm_width = 15;       //widhth of block
support_arm_height = arm_block_height + 20;     //heighrt for screw to attach to the support arm
support_arm_distance = 32;   //distance from little block
support_arm_stength_width  = 4;  //width of support for support arm block
support_arm_stength_length = 2.5; //length ""


plate_width = 40.5;           //width of bottom plate
plate_length = 40 + locked3mm + arm_block_length/2;          //length of bottom palte
plate_bevel_back = 5;        //bevel radius for back corners of plate
plate_bevel_front = 10;      //bevel radius for front corners of plate


module gear(){
   cylinder(r=gear_radius - teeth_height, h = thickness);
   for (i = [0:180/(no_teeth-1):180]){
      rotate(i)
      hull(){
         translate([0,-0.5*teeth_width,0])
         cube([gear_radius - teeth_height, teeth_width, thickness]);
         translate([gear_radius - teeth_bevel /2, 0, 0])
         cylinder(d = teeth_bevel, h=thickness, $fn = 25);
      }
   }
}


module left_gear(){
   difference(){
      union(){
         rotate(-(180/(no_teeth-1)) / 2 - 90)
         gear();
         beam1();
      }
      cylinder(d=left_gear_hole_diameter, h=thickness);
   }
}

module right_gear(){
   difference(){
      union(){
         rotate(90)
         gear();
         beam1();
      }
      cylinder(d=right_gear_hole_diameter, h=thickness);
   }  
}

module beam1(){
   difference(){
      union(){
         translate([-0.5 * beam1_width, 0, 0])
         cube([beam1_width, beam1_length - 0.5 * beam1_width, thickness]);
         translate([0, beam1_length - 0.5 * beam1_width, 0])
         cylinder(d=beam1_width, h=thickness);
      }
      translate([0, beam1_length - 0.5 * beam1_width, 0])
      cylinder(d=beam1_hole_diameter, h=thickness);
   }
}

module beam2(){
   difference(){
      union(){
         translate([-0.5 * beam2_width, 0, 0])
         cube([beam2_width, beam2_length - 0.5 * beam2_width, thickness]);
         cylinder(d=beam2_width, h=thickness);
         translate([0,beam2_length - 0.5 * beam2_width, 0])
         cylinder(d=beam2_width, h=thickness);   
      }
      cylinder(d=beam2_hole_diameter, h=thickness);
      translate([0, beam2_length - 0.5 *beam2_width, 0])
      cylinder(d=beam2_hole_diameter, h=thickness);      
   }
}

module bottom_plate(){
   difference (){
      //bottom base plate to cut crap out of
      hull(){
         translate([gear_hole_dist/2 - plate_width/2 + plate_bevel_front, plate_length/2 - plate_bevel_front, 0])
         cylinder(r=plate_bevel_front, h = thickness);
         translate([gear_hole_dist/2 + plate_width/2 - plate_bevel_front, plate_length/2 - plate_bevel_front, 0])
         cylinder(r=plate_bevel_front, h = thickness);
         translate([gear_hole_dist/2 - plate_width/2 + plate_bevel_back , -plate_length/2 + plate_bevel_back, 0])
         cylinder(r=plate_bevel_back, h = thickness);
         translate([gear_hole_dist/2 + plate_width/2 - plate_bevel_back , -plate_length/2 + plate_bevel_back, 0])
         cylinder(r=plate_bevel_back, h = thickness);
      }
      
      /*
      translate([-0.5 * plate_length + 0.5 * gear_hole_dist, -0.5 * plate_width, 0])
      cube([plate_length, plate_width, thickness]);
      */
      
      //holes for screws of gears and servo mount cutouts
      cylinder(d=locked2mm,h=thickness);
      translate([gear_hole_dist -2, 0, 0])
      cube([15, servo_width, 30], center=true);  
      
      //cutouts for beam 2 bottom hole mounts
      translate([beam2_center_dist, beam2_forward_dist, 0])
      cylinder(d=locked2mm, h=thickness);
      translate([gear_hole_dist - beam2_center_dist, beam2_forward_dist, 0])
      cylinder(d=locked2mm, h=thickness);
      
   }
   translate([gear_hole_dist, 0, -servo_height + thickness])
   servo_bracket();
   
   //arm block
   translate([gear_hole_dist / 2 - arm_block_width/2, -plate_length/2, -arm_block_height])
   difference(){
      cube([arm_block_width, arm_block_length, arm_block_height + arm_block_length/2]);
      translate([0, arm_block_length/2, arm_block_length/2 ])
      rotate([0, 90, 0])
      cylinder(d = locked3mm, h=arm_block_width);
   }
   
   //suport arm block
   translate([gear_hole_dist / 2 - support_arm_width/2, -plate_length/2 + arm_block_length/2 + support_arm_distance - support_arm_length/2, -support_arm_height])
   difference(){
      union(){
         cube([support_arm_width, support_arm_length, support_arm_height + support_arm_length/2]);
         translate([support_arm_width/2-support_arm_stength_width/2,-support_arm_stength_length,support_arm_length/2+ support_arm_height - servo_height])
         cube([support_arm_stength_width, support_arm_stength_length, servo_height]);
      }
      translate([0,support_arm_length/2, support_arm_length/2])
      rotate([0, 90, 0])
      cylinder(d=locked3mm, h = support_arm_width);
   }
         
}

module servo_bracket(){
 translate([-(servo_length+2*servo_wall_thick)/2 - servo_shaft,-(servo_width+2*servo_wall_thick)/2,0])
 difference(){
   cube([servo_length + 2*servo_wall_thick, servo_width + 2*servo_wall_thick, servo_height]);
   translate([servo_wall_thick, servo_wall_thick, 0])
   cube([servo_length, servo_width, servo_height]);
 }   
}

module gripper_arm(){
   difference(){
      union(){
         hull(){
            cylinder(d = gripper_arm_width, h = thickness);   
            translate([beam2_center_dist, beam2_forward_dist, 0])
            cylinder(d = gripper_arm_width, h = thickness);
         }
         translate([-0.5 * gripper_arm_width + beam2_center_dist, beam2_forward_dist, 0])
         cube([gripper_arm_width, gripper_arm_length, thickness]);

         translate([-0.5 * gripper_arm_width + beam2_center_dist + (gripper_arm_width - gripper_arm_pad_thickness), beam2_forward_dist + (gripper_arm_length - gripper_arm_pad_length), 0])
         cube([gripper_arm_pad_thickness, gripper_arm_pad_length, gripper_arm_pad_height]);
         
      }
      cylinder(d = locked2mm, h = thickness);   
      translate([beam2_center_dist, beam2_forward_dist, 0])
      cylinder(d = locked2mm, h = thickness);
      
   }
}

module left_arm(){
   gripper_arm();
}

module right_arm(){
   mirror([1,0,0])
   gripper_arm();
}


translate([0,beam1_length - 0.5 * beam_widths,-thickness])
left_arm();

translate([gear_hole_dist,beam1_length - 0.5 * beam_widths,-thickness])
!right_arm();

translate([beam2_center_dist,beam2_forward_dist,0])
beam2();

translate([gear_hole_dist - beam2_center_dist,beam2_forward_dist,0])
beam2();


translate([0,0,-thickness])
bottom_plate();

left_gear();

translate([gear_radius * 2 - teeth_height + teeth_budge,0,0])
right_gear();//general
$fn = 30;                  //convexity of general curved faces
thickness = 3.9;             //thickness of arm

//circular servo horn measurements
horn_diameter = 21;             //diameter of the circular horn
horn_center_hole = 9;          //diameter of the center hole (for screw)
horn_outer_hole_diameters = 1.9;  //diameter of the outer holes for screwing down horn
horn_outer_holes_center_dist = 7.8;//distance from center to the outer holes

//arm specific stuff
arm_length = 200;//155;               //horn center to horn center distance for arm length

free_turning3mm = 3.4;          //diameter of hole for free turning motion

module horn(){
   cylinder(d=horn_center_hole, h=thickness);
   translate([horn_outer_holes_center_dist, 0, 0])
   cylinder(d=horn_outer_hole_diameters, h=thickness);
   translate([-horn_outer_holes_center_dist, 0, 0])
   cylinder(d=horn_outer_hole_diameters, h=thickness);
}

difference(){
   hull(){
      cylinder(d=horn_diameter,h=thickness, $fn = 60);
      translate([0,arm_length,0])
      cylinder(d=horn_diameter,h=thickness, $fn = 60);
   }
   horn();
   translate([0,arm_length,0])
   cylinder(d=free_turning3mm, h=thickness);
}//general
$fn = 30;                  //convexity of general curved faces
thickness = 3.9;             //thickness of arm

//circular servo horn measurements
horn_diameter = 21;             //diameter of the circular horn
horn_center_hole = 9;          //diameter of the center hole (for screw)
horn_outer_hole_diameters = 1.9;  //diameter of the outer holes for screwing down horn
horn_outer_holes_center_dist = 7.8;//distance from center to the outer holes

//arm specific stuff
arm_length = 200;               //horn center to horn center distance for arm length

free_turning3mm = 3.4;          //diameter of hole for free turning motion

module horn(){
   cylinder(d=horn_center_hole, h=thickness);
   translate([horn_outer_holes_center_dist, 0, 0])
   cylinder(d=horn_outer_hole_diameters, h=thickness);
   translate([-horn_outer_holes_center_dist, 0, 0])
   cylinder(d=horn_outer_hole_diameters, h=thickness);
}

difference(){
   hull(){
      cylinder(d=horn_diameter,h=thickness, $fn = 60);
      translate([0,arm_length,0])
      cylinder(d=horn_diameter,h=thickness, $fn = 60);
   }
   cylinder(d=free_turning3mm,h=thickness);
   translate([0,arm_length,0])
   cylinder(d=free_turning3mm,h=thickness);
}//general
$fn = 30;                  //convexity of general curved faces
thickness = 3.9;             //thickness of arm

//circular servo horn measurements
horn_diameter = 21;             //diameter of the circular horn
horn_center_hole = 8.9;          //diameter of the center hole (for screw)
horn_outer_hole_diameters = 1.9;  //diameter of the outer holes for screwing down horn
horn_outer_holes_center_dist = 7.8;//distance from center to the outer holes

//arm specific stuff
arm_length = 39.4;               //horn center to horn center distance for arm length

pivot_diameter = 10;            //diameter of pivoting end
free_turning3mm = 3.4;          //diameter of hole for free turning motion

module horn(){
   cylinder(d=horn_center_hole, h=thickness);
   translate([horn_outer_holes_center_dist, 0, 0])
   cylinder(d=horn_outer_hole_diameters, h=thickness);
   translate([-horn_outer_holes_center_dist, 0, 0])
   cylinder(d=horn_outer_hole_diameters, h=thickness);
}

difference(){
   hull(){
      cylinder(d=horn_diameter,h=thickness, $fn = 60);
      translate([0,arm_length,0])
      cylinder(d=pivot_diameter,h=thickness, $fn = 60);
   }
   horn();
   translate([0,arm_length,0])
   cylinder(d=free_turning3mm,h=thickness);
}//general
$fn = 30;                  //convexity of general curved faces
thickness = 3.9;             //thickness of arm

//arm specific stuff
arm_length =  200;//155;               //horn center to horn center distance for arm length

pivot_diameter = 10;            //diameter of pivoting end
free_turning3mm = 3.4;          //diameter of hole for free turning motion

difference(){
   hull(){
      cylinder(d=pivot_diameter,h=thickness, $fn = 60);
      translate([0,arm_length,0])
      cylinder(d=pivot_diameter,h=thickness, $fn = 60);
   }
   cylinder(d=free_turning3mm,h=thickness);
   translate([0,arm_length,0])
   cylinder(d=free_turning3mm,h=thickness);
}//general
$fn = 30;                  //convexity of general curved faces
thickness = 3.9;             //thickness of arm

//circular servo horn measurements
horn_diameter = 21;             //diameter of the circular horn

//arm specific stuff
arm_length =  200;//155               //horn center to horn center distance for arm length
lever_length = 39.4;             //length of lever bit on end of arm

pivot_diameter = 10;            //diameter of pivoting end
free_turning3mm = 3.4;          //diameter of hole for free turning motion

difference(){
   hull(){
      cylinder(d=pivot_diameter,h=thickness, $fn = 60);
      translate([0,lever_length,0])
      cylinder(d=horn_diameter,h=thickness, $fn = 60);
      translate([0,lever_length+arm_length,0])
      cylinder(d=pivot_diameter, h=thickness, $fn = 60);
   }
   cylinder(d=free_turning3mm,h=thickness);
   translate([0,lever_length,0])
   cylinder(d=free_turning3mm,h=thickness);
   translate([0,lever_length+arm_length,0])
   cylinder(d=free_turning3mm,h=thickness);
}//general
$fn = 30;                  //convexity of general curved faces
thickness = 3.9;             //thickness of arm

//circular servo horn measurements
horn_diameter = 21;             //diameter of the circular horn

//arm specific stuff
arm_length =  155;               //horn center to horn center distance for arm length
lever_length = 39.4;             //length of lever bit on end of arm
support_height = 35;             //height between the supporting beam and the other beam going to the gripper

pivot_diameter = 10;            //diameter of pivoting end
free_turning3mm = 3.4;          //diameter of hole for free turning motion

difference(){
   hull(){
      cylinder(d=horn_diameter,h=thickness, $fn = 60);
      translate([0,lever_length,0])
      cylinder(d=pivot_diameter,h=thickness, $fn = 60);
      translate([support_height, 0, 0])
      cylinder(d=pivot_diameter, h=thickness, $fn = 60);
   }
   cylinder(d=free_turning3mm,h=thickness);
   translate([0,lever_length,0])
   cylinder(d=free_turning3mm,h=thickness);
   translate([support_height, 0,0])
   cylinder(d=free_turning3mm,h=thickness);
}//general
$fn = 30;                  //convexity of general curved faces
thickness = 3.9;             //thickness of arm

//circular servo horn measurements
horn_diameter = 21;             //diameter of the circular horn

//arm specific stuff
arm_length =  200;//155               //horn center to horn center distance for arm length
lever_length = 39.4;             //length of lever bit on end of arm

pivot_diameter = 10;            //diameter of pivoting end
free_turning3mm = 3.4;          //diameter of hole for free turning motion

difference(){
   hull(){
      cylinder(d=horn_diameter,h=thickness, $fn = 60);
      translate([0,arm_length,0])
      cylinder(d=pivot_diameter, h=thickness, $fn = 60);
   }
   cylinder(d=free_turning3mm,h=thickness);
   translate([0,arm_length,0])
   cylinder(d=free_turning3mm,h=thickness);
}/********************
model of mg996r servo
*********************/

//dimensions of central box (excluding the pads)
//height is including the proruding neck around the shaft
length = 40.3;
width = 20;
height = 37;

//distance from nearest wall to the motor shaft
wall_to_shaft = 10.5;

//self explanatory measuremets
hole_length = 48;
hole_width = 10;
hole_diameter = 4;

//height is from ground to bottom of pad
pad_height = 26;
//self explanatory
pad_thick = 2.5;
pad_length = 6.5;

//convexity of holes
$fn = 20;

module pad(){
    difference(){
        cube([pad_length, width, pad_thick]);
        translate([pad_length/2, width/2-hole_width/2, 0])
        cylinder(d=3,h=pad_thick);
        translate([pad_length/2, width/2+hole_width/2, 0])
        cylinder(d=3,h=pad_thick);
    }
}

module servo(){
    translate([0,0,pad_height])
    pad();
    translate([pad_length+length,0,pad_height])
    pad();
    translate([pad_length, 0, 0])
    cube([length, width, height]);
    translate([pad_length + wall_to_shaft, width/2, height])
    cylinder(h=5,d=5);
}

color([0,1,0])
servo();//general
$fn = 30;                      //convexity of general curved faces
thickness = 3.5;                 //thickness next to flat servo

servo_distance = 50;             //distance between the inner of the two servo's pads

//circle servo horn measurements
horn_center_hole = 7;            //diameter of the center hole (for screw)
horn_outer_hole_diameters = 1.9;  //diameter of the outer holes for screwing down horn
horn_outer_holes_center_dist = 7.8;//distance from center to the outer holes
horn_dist = 5;                  //distance of horn from wall against servo pad

//servo pad
servo_hole_diameter = 2.87;           //diamter of holes for servo attachment
servo_hole_width = 10;             //width of short distance between hole so same side of servo
servo_hole_length = 48;            //length of long distance between holes on either side of servo
servo_pad_width = 20;              //width of servo pad
servo_pad_length = 54;             //length of servo pad
servo_length = 41;                //wideness (length) of servo
servo_pad_thickness = 8;           //thickness of servo pad
servo_width = servo_pad_length;     //width or thin side of the servo

//arm cutout
cutout_width = 30;        //width of cutout
cutout_depth = 1.5;         //depth of cutout

module horn(){
   cylinder(d=horn_center_hole, h=thickness);
   translate([horn_outer_holes_center_dist, 0, 0])
   cylinder(d=horn_outer_hole_diameters, h=thickness);
   translate([-horn_outer_holes_center_dist, 0, 0])
   cylinder(d=horn_outer_hole_diameters, h=thickness);
}

module servo_holes(){
   translate([servo_pad_length/2 - servo_hole_length/2, servo_pad_width/2 - servo_hole_width/2, 0])
   cylinder(d = servo_hole_diameter, h = servo_pad_thickness);
   translate([servo_pad_length/2 - servo_hole_length/2, servo_pad_width/2 + servo_hole_width/2, 0])
   cylinder(d = servo_hole_diameter, h = servo_pad_thickness);
   translate([servo_pad_length/2 + servo_hole_length/2, servo_pad_width/2 - servo_hole_width/2, 0])
   cylinder(d = servo_hole_diameter, h = servo_pad_thickness);
   translate([servo_pad_length/2 + servo_hole_length/2, servo_pad_width/2 + servo_hole_width/2, 0])
   cylinder(d = servo_hole_diameter, h = servo_pad_thickness);
}


module servo_pad(){
   translate([servo_pad_length/-2,0,thickness])
   rotate([90,0,0])
   difference(){
      cube([servo_pad_length, servo_pad_width, servo_pad_thickness]);
      servo_holes();
   }
}

module hinge_section(){
   difference(){
      cube([(servo_pad_length - servo_length) / 2, servo_pad_thickness, servo_pad_width/2 + (servo_pad_length - servo_length) / 4]);
      translate([(servo_pad_length - servo_length) / 4, 0, servo_pad_width / 2])
      rotate([-90,0,0])
      cylinder(d = servo_hole_diameter, h=servo_pad_thickness);
   }
}

module body(){
   translate([servo_pad_length/-2, servo_distance/-2 - servo_pad_thickness, 0])
   cube([servo_pad_length, servo_distance + 2 * servo_pad_thickness, thickness]);
   translate([0, servo_distance/-2, 0])
   servo_pad();
   translate([0, servo_distance/2 + servo_pad_thickness, 0])
   servo_pad();
}

difference(){
   body();
   //servos
   translate([servo_length/-2, servo_distance/-2 - servo_pad_thickness - 1, thickness])
   cube([servo_length, servo_distance + 2 * servo_pad_thickness + 2, servo_pad_width + 2]);
   //cutout
   translate([servo_length/-2, cutout_width / -2, thickness - cutout_depth])
   cube([servo_length/2 - 1.5, cutout_width, cutout_depth]);
   
   rotate(90)
   horn();
   
}
translate([servo_pad_length/2 - (servo_pad_length - servo_length) / 2 ,servo_distance/2,thickness+servo_pad_width])
hinge_section();

/*
difference(){
   hulled_body();
   
   union(){
      translate([-0.5*servo_length,-0.5*horn_diameter,thickness])
      cube([servo_length, horn_diameter, servo_pad_width+10]);
      
      translate([-0.5*servo_width, -0.5*horn_diameter, thickness])
      cube([servo_width, 0.5*horn_diameter-servo_pad_thickness, servo_pad_width+10]);
      
      translate([-0.5 * servo_pad_length, -0.1, thickness])
      rotate([90,0,0])
      servo_pad();
      
      horn();
   }
}   


//servo_pad();
/*
module horn(){
   difference(){
      cylinder(d=horn_diameter, h=thickness, $fn = 60);
      cylinder(d=horn_center_hole, h=thickness);
      translate([horn_outer_holes_center_dist, 0, 0])
      cylinder(d=horn_outer_hole_diameters, h=thickness);
      translate([-horn_outer_holes_center_dist, 0, 0])
      cylinder(d=horn_outer_hole_diameters, h=thickness);
   }   
}

module servo_pad(){
   difference(){
      cube([servo_pad_length, servo_pad_width, servo_pad_thickness]);
      translate([servo_pad_length/2 - servo_hole_length/2, servo_pad_width/2 - servo_hole_width/2, 0])
      cylinder(d = servo_hole_diameter, h = servo_pad_thickness);
      translate([servo_pad_length/2 - servo_hole_length/2, servo_pad_width/2 + servo_hole_width/2, 0])
      cylinder(d = servo_hole_diameter, h = servo_pad_thickness);
      translate([servo_pad_length/2 + servo_hole_length/2, servo_pad_width/2 - servo_hole_width/2, 0])
      cylinder(d = servo_hole_diameter, h = servo_pad_thickness);
      translate([servo_pad_length/2 + servo_hole_length/2, servo_pad_width/2 + servo_hole_width/2, 0])
      cylinder(d = servo_hole_diameter, h = servo_pad_thickness);
   }  
}
